Мотивация:
бизнес:
    Невозможность понять в каком месте системы застрял объект (долгий дебаг)
    Невозможность быстро установить проблему в бизнес-логике или краевой случай (плохой пользовательский опыт)
    Невозможность решить вопрос вручную, т.к. неизвестна точка зависания 

    Возможность полечить завсшие заказы от клиентов селлеров ()
    Возможность понять узкие места в производительности системы
    Возможность строить аналитические дэшборды и воронки продаж

Предлагаемое решение
https://disk.yandex.ru/d/EjOIKx1c_655Iw

Настроить debezium на статусы заказов для API и MES баз, если id заказов не склеены никак, склеить их. 
Если невозможно поднять debezium сделать pg с историческими таблицами по статусам заказов.
схема таблицы что-то в духе
history_id::seq::pk | object_id | updated_at | status | initiator | comment

От initiator можно отказаться т.к. судя по схеме кажется, что status явно определяет систему-инициатора изменения
Возможно настроить отслеживание не только заказов, но и статус пользователей или другой метаинформации.

Компромиссы:
С debezium не вижу никаких компромиссов, изменения минимальные

Я понимаю, что задание говорит о том, что нужно настроить ELK стек.
Но если нам надо здесь и сейчас получить максимум, то быстрее будет настроить debezium, чтобы найти узкие места в начале. 
Для поиска узких мест во взаимодействии frontend-api или зависания фронтенда, мониторинг даст больше данных на первом этапе
Нету никакого резона подключать ELK пока поиск трейса по логам не занимает вечность

Аспекты безопасности:
Для получения трейса изменений не нужны персональные данные
